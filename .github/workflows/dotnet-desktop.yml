name: Build and Test .NET Framework

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
      - develop # Trigger on pushes to the develop branch
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: self-hosted # .NET Framework typically requires a Windows runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Setup MSBuild
        # This action provides MSBuild on Windows runners
        # Ensure it's available for your .NET Framework version
        uses: microsoft/setup-msbuild@v2 # Use a specific version for stability

      - name: Setup NuGet
        # Ensures NuGet is available for restoring packages
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore Leetx.OpenProtocol.sln # Replace YourSolutionName.sln with your actual solution file name

      - name: Build .NET Framework Solution
        # Use MSBuild to build your solution
        run: msbuild Leetx.OpenProtocol.sln /p:Configuration=Release /p:Platform="Any CPU" # Adjust Configuration and Platform as needed

      - name: Run Tests (Optional, if you have MSTest/NUnit/xUnit tests)
        # Assuming you have a test project in your solution
        # You might need to adjust the path to your test project's DLLs
        run: |
          # Example for running MSTest/NUnit/xUnit tests using VSTest.Console.exe
          # Find the path to VSTest.Console.exe. It's usually in the Visual Studio installation path.
          # A more robust way might be to add the path to the PATH environment variable or
          # use a specific action for VSTest.
          # For simplicity, here's a common path, adjust if necessary.
          # Search for 'vstest.console.exe' on the runner.
          # For a more robust approach, consider adding the path to PATH or using a custom script.
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe" YourTestsProjectName\bin\Release\YourTestsProjectName.dll /logger:trx

          # If you're using dotnet test (for multi-targeting or if you have .NET Core/5+ tests in the same solution),
          # this might work, but it's less common for pure .NET Framework projects.
          # dotnet test Leetx.OpenProtocol.sln
        continue-on-error: true # Allow subsequent steps to run even if tests fail, for reporting purposes

      - name: Upload Artifacts (Optional)
        # Upload build outputs or test results for later inspection
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            YourProjectName/bin/Release/ # Path to your compiled binaries
            TestResults/ # Path where VSTest generates TRX files
